// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feature.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countFeatures = `-- name: CountFeatures :one
select count(*) from feature
where tenant_slug = $1
`

func (q *Queries) CountFeatures(ctx context.Context, tenantSlug string) (int64, error) {
	row := q.db.QueryRow(ctx, countFeatures, tenantSlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFeature = `-- name: CreateFeature :one
insert into feature (
  name,
  slug,
  description,
  tenant_slug,
  type,
  config,
  created_by,
  updated_by
) values (
  $1, $2, $3, $4, $5, $6, $7, $8
) returning id, name, slug, description, tenant_slug, type, config, created_at, updated_at, created_by, updated_by
`

type CreateFeatureParams struct {
	Name        string
	Slug        string
	Description string
	TenantSlug  string
	Type        NullFeatureEnum
	Config      []byte
	CreatedBy   string
	UpdatedBy   string
}

func (q *Queries) CreateFeature(ctx context.Context, arg CreateFeatureParams) (Feature, error) {
	row := q.db.QueryRow(ctx, createFeature,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.TenantSlug,
		arg.Type,
		arg.Config,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Feature
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.TenantSlug,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteFeatureByID = `-- name: DeleteFeatureByID :exec
delete from feature
where id = $1
and tenant_slug = $2
`

type DeleteFeatureByIDParams struct {
	ID         pgtype.UUID
	TenantSlug string
}

func (q *Queries) DeleteFeatureByID(ctx context.Context, arg DeleteFeatureByIDParams) error {
	_, err := q.db.Exec(ctx, deleteFeatureByID, arg.ID, arg.TenantSlug)
	return err
}

const getFeatureByID = `-- name: GetFeatureByID :one
select id, name, slug, description, tenant_slug, type, config, created_at, updated_at, created_by, updated_by from feature
where id = $1
and tenant_slug = $2
`

type GetFeatureByIDParams struct {
	ID         pgtype.UUID
	TenantSlug string
}

func (q *Queries) GetFeatureByID(ctx context.Context, arg GetFeatureByIDParams) (Feature, error) {
	row := q.db.QueryRow(ctx, getFeatureByID, arg.ID, arg.TenantSlug)
	var i Feature
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.TenantSlug,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const listFeaturesPaginated = `-- name: ListFeaturesPaginated :many
select id, name, slug, description, tenant_slug, type, config, created_at, updated_at, created_by, updated_by from feature
where tenant_slug = $1
order by created_at desc
limit $2
offset $3
`

type ListFeaturesPaginatedParams struct {
	TenantSlug string
	Limit      int32
	Offset     int32
}

func (q *Queries) ListFeaturesPaginated(ctx context.Context, arg ListFeaturesPaginatedParams) ([]Feature, error) {
	rows, err := q.db.Query(ctx, listFeaturesPaginated, arg.TenantSlug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.TenantSlug,
			&i.Type,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeatureByID = `-- name: UpdateFeatureByID :one
update feature
set name = coalesce($6, name),
    description = coalesce($1, description),
    config = coalesce($2, config),
    updated_by = $3
where id = $4
and tenant_slug = $5
returning id, name, slug, description, tenant_slug, type, config, created_at, updated_at, created_by, updated_by
`

type UpdateFeatureByIDParams struct {
	Description string
	Config      []byte
	UpdatedBy   string
	ID          pgtype.UUID
	TenantSlug  string
	Name        pgtype.Text
}

func (q *Queries) UpdateFeatureByID(ctx context.Context, arg UpdateFeatureByIDParams) (Feature, error) {
	row := q.db.QueryRow(ctx, updateFeatureByID,
		arg.Description,
		arg.Config,
		arg.UpdatedBy,
		arg.ID,
		arg.TenantSlug,
		arg.Name,
	)
	var i Feature
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.TenantSlug,
		&i.Type,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
