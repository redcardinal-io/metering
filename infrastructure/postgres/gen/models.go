// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package gen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AggregationEnum string

const (
	AggregationEnumCount       AggregationEnum = "count"
	AggregationEnumSum         AggregationEnum = "sum"
	AggregationEnumAvg         AggregationEnum = "avg"
	AggregationEnumUniqueCount AggregationEnum = "unique_count"
	AggregationEnumMin         AggregationEnum = "min"
	AggregationEnumMax         AggregationEnum = "max"
)

func (e *AggregationEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AggregationEnum(s)
	case string:
		*e = AggregationEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AggregationEnum: %T", src)
	}
	return nil
}

type NullAggregationEnum struct {
	AggregationEnum AggregationEnum
	Valid           bool // Valid is true if AggregationEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAggregationEnum) Scan(value interface{}) error {
	if value == nil {
		ns.AggregationEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AggregationEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAggregationEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AggregationEnum), nil
}

type Meter struct {
	ID            pgtype.UUID
	Slug          string
	EventType     pgtype.Text
	Description   pgtype.Text
	ValueProperty pgtype.Text
	Properties    []string
	Aggregation   AggregationEnum
	CreatedAt     pgtype.Timestamptz
	CreatedBy     string
}
