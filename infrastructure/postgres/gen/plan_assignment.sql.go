// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plan_assignment.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignPlan = `-- name: AssignPlan :one
insert into plan_assignment (
    plan_id,
    organization_id,

    user_id,
    valid_from,
    valid_until,
    created_by,
    updated_by
) values (
    $1, $2, $3, $4, $5, $6, $7
) returning id, plan_id, organization_id, user_id, valid_from, valid_until, created_at, updated_at, created_by, updated_by
`

type AssignPlanParams struct {
	PlanID         pgtype.UUID
	OrganizationID pgtype.Text
	UserID         pgtype.Text
	ValidFrom      pgtype.Timestamptz
	ValidUntil     pgtype.Timestamptz
	CreatedBy      string
	UpdatedBy      string
}

// assigns a plan to either an organization or a user based on which id is provided
func (q *Queries) AssignPlan(ctx context.Context, arg AssignPlanParams) (PlanAssignment, error) {
	row := q.db.QueryRow(ctx, assignPlan,
		arg.PlanID,
		arg.OrganizationID,
		arg.UserID,
		arg.ValidFrom,
		arg.ValidUntil,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i PlanAssignment
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.OrganizationID,
		&i.UserID,
		&i.ValidFrom,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const terminateAssignedPlan = `-- name: TerminateAssignedPlan :exec
delete from plan_assignment
where plan_id = $1
and (
    (organization_id = $2 and $2 is not null) or
    (user_id = $3 and $3 is not null)
)
`

type TerminateAssignedPlanParams struct {
	PlanID         pgtype.UUID
	OrganizationID pgtype.Text
	UserID         pgtype.Text
}

// removes a plan assignment for either an organization or user
func (q *Queries) TerminateAssignedPlan(ctx context.Context, arg TerminateAssignedPlanParams) error {
	_, err := q.db.Exec(ctx, terminateAssignedPlan, arg.PlanID, arg.OrganizationID, arg.UserID)
	return err
}

const updateAssignedPlan = `-- name: UpdateAssignedPlan :one
update plan_assignment
set valid_until = coalesce($4, valid_until),
    valid_from = coalesce($3, valid_from),
    updated_by = $5
where (plan_id = $1)
and (
    (organization_id = $2 or $2 is null) or
    (user_id = $6 or $6 is null)
)
returning id, plan_id, organization_id, user_id, valid_from, valid_until, created_at, updated_at, created_by, updated_by
`

type UpdateAssignedPlanParams struct {
	PlanID         pgtype.UUID
	OrganizationID pgtype.Text
	ValidFrom      pgtype.Timestamptz
	ValidUntil     pgtype.Timestamptz
	UpdatedBy      string
	UserID         pgtype.Text
}

// updates the validity period of a plan assignment for either organization or user
func (q *Queries) UpdateAssignedPlan(ctx context.Context, arg UpdateAssignedPlanParams) (PlanAssignment, error) {
	row := q.db.QueryRow(ctx, updateAssignedPlan,
		arg.PlanID,
		arg.OrganizationID,
		arg.ValidFrom,
		arg.ValidUntil,
		arg.UpdatedBy,
		arg.UserID,
	)
	var i PlanAssignment
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.OrganizationID,
		&i.UserID,
		&i.ValidFrom,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
