// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quota.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkMeteredFeature = `-- name: CheckMeteredFeature :one
select exists (
    select 1
    from feature f
    join plan_feature pf on f.id = pf.feature_id
    where pf.id = $1
    and f.type = 'metered'
)
`

func (q *Queries) CheckMeteredFeature(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkMeteredFeature, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createPlanFeatureQuota = `-- name: CreatePlanFeatureQuota :one
insert into plan_feature_quota (
    plan_feature_id,
    limit_value,
    reset_period,
    custom_period_minutes,
    action_at_limit
) values (
    $1, $2, $3, $4, $5
) returning id, plan_feature_id, limit_value, reset_period, custom_period_minutes, action_at_limit, created_at, updated_at
`

type CreatePlanFeatureQuotaParams struct {
	PlanFeatureID       pgtype.UUID
	LimitValue          int64
	ResetPeriod         MeteredResetPeriodEnum
	CustomPeriodMinutes pgtype.Int8
	ActionAtLimit       MeteredActionAtLimitEnum
}

func (q *Queries) CreatePlanFeatureQuota(ctx context.Context, arg CreatePlanFeatureQuotaParams) (PlanFeatureQuotum, error) {
	row := q.db.QueryRow(ctx, createPlanFeatureQuota,
		arg.PlanFeatureID,
		arg.LimitValue,
		arg.ResetPeriod,
		arg.CustomPeriodMinutes,
		arg.ActionAtLimit,
	)
	var i PlanFeatureQuotum
	err := row.Scan(
		&i.ID,
		&i.PlanFeatureID,
		&i.LimitValue,
		&i.ResetPeriod,
		&i.CustomPeriodMinutes,
		&i.ActionAtLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlanFeatureQuota = `-- name: DeletePlanFeatureQuota :exec
delete from plan_feature_quota
where plan_feature_id = $1
`

func (q *Queries) DeletePlanFeatureQuota(ctx context.Context, planFeatureID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePlanFeatureQuota, planFeatureID)
	return err
}

const getPlanFeatureQuotaByPlanFeatureID = `-- name: GetPlanFeatureQuotaByPlanFeatureID :one
select id, plan_feature_id, limit_value, reset_period, custom_period_minutes, action_at_limit, created_at, updated_at from plan_feature_quota
where plan_feature_id = $1
`

func (q *Queries) GetPlanFeatureQuotaByPlanFeatureID(ctx context.Context, planFeatureID pgtype.UUID) (PlanFeatureQuotum, error) {
	row := q.db.QueryRow(ctx, getPlanFeatureQuotaByPlanFeatureID, planFeatureID)
	var i PlanFeatureQuotum
	err := row.Scan(
		&i.ID,
		&i.PlanFeatureID,
		&i.LimitValue,
		&i.ResetPeriod,
		&i.CustomPeriodMinutes,
		&i.ActionAtLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlanFeatureQuota = `-- name: UpdatePlanFeatureQuota :one
update plan_feature_quota
set
    limit_value = $2,
    reset_period = $3,
    custom_period_minutes = $4,
    action_at_limit = $5,
    updated_at = now()
where plan_feature_id = $1
returning id, plan_feature_id, limit_value, reset_period, custom_period_minutes, action_at_limit, created_at, updated_at
`

type UpdatePlanFeatureQuotaParams struct {
	PlanFeatureID       pgtype.UUID
	LimitValue          int64
	ResetPeriod         MeteredResetPeriodEnum
	CustomPeriodMinutes pgtype.Int8
	ActionAtLimit       MeteredActionAtLimitEnum
}

func (q *Queries) UpdatePlanFeatureQuota(ctx context.Context, arg UpdatePlanFeatureQuotaParams) (PlanFeatureQuotum, error) {
	row := q.db.QueryRow(ctx, updatePlanFeatureQuota,
		arg.PlanFeatureID,
		arg.LimitValue,
		arg.ResetPeriod,
		arg.CustomPeriodMinutes,
		arg.ActionAtLimit,
	)
	var i PlanFeatureQuotum
	err := row.Scan(
		&i.ID,
		&i.PlanFeatureID,
		&i.LimitValue,
		&i.ResetPeriod,
		&i.CustomPeriodMinutes,
		&i.ActionAtLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
