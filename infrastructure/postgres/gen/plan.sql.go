// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plan.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPlans = `-- name: CountPlans :one
SELECT count(*) FROM plan
WHERE tenant_slug = $1
`

func (q *Queries) CountPlans(ctx context.Context, tenantSlug string) (int64, error) {
	row := q.db.QueryRow(ctx, countPlans, tenantSlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPlan = `-- name: CreatePlan :one
INSERT INTO plan (
    name,
    description,
    tenant_slug,
    created_by,
    updated_by
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, description, tenant_slug, created_at, updated_at, created_by, updated_by
`

type CreatePlanParams struct {
	Name        string
	Description pgtype.Text
	TenantSlug  string
	CreatedBy   string
	UpdatedBy   string
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, createPlan,
		arg.Name,
		arg.Description,
		arg.TenantSlug,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deletePlanByID = `-- name: DeletePlanByID :exec
DELETE FROM plan
WHERE id = $1
AND tenant_slug = $2
`

type DeletePlanByIDParams struct {
	ID         pgtype.UUID
	TenantSlug string
}

func (q *Queries) DeletePlanByID(ctx context.Context, arg DeletePlanByIDParams) error {
	_, err := q.db.Exec(ctx, deletePlanByID, arg.ID, arg.TenantSlug)
	return err
}

const getPlanByID = `-- name: GetPlanByID :one
SELECT id, name, description, tenant_slug, created_at, updated_at, created_by, updated_by FROM plan
WHERE id = $1
AND tenant_slug = $2
`

type GetPlanByIDParams struct {
	ID         pgtype.UUID
	TenantSlug string
}

func (q *Queries) GetPlanByID(ctx context.Context, arg GetPlanByIDParams) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlanByID, arg.ID, arg.TenantSlug)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const listPlansPaginated = `-- name: ListPlansPaginated :many
SELECT id, name, description, tenant_slug, created_at, updated_at, created_by, updated_by FROM plan
WHERE tenant_slug = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListPlansPaginatedParams struct {
	TenantSlug string
	Limit      int32
	Offset     int32
}

func (q *Queries) ListPlansPaginated(ctx context.Context, arg ListPlansPaginatedParams) ([]Plan, error) {
	rows, err := q.db.Query(ctx, listPlansPaginated, arg.TenantSlug, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TenantSlug,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlanByID = `-- name: UpdatePlanByID :one
UPDATE plan
SET name = coalesce($5, name),
    description = coalesce($1, description),
    updated_by = $4
WHERE id = $2
AND tenant_slug = $3
RETURNING id, name, description, tenant_slug, created_at, updated_at, created_by, updated_by
`

type UpdatePlanByIDParams struct {
	Description pgtype.Text
	ID          pgtype.UUID
	TenantSlug  string
	UpdatedBy   string
	Name        pgtype.Text
}

func (q *Queries) UpdatePlanByID(ctx context.Context, arg UpdatePlanByIDParams) (Plan, error) {
	row := q.db.QueryRow(ctx, updatePlanByID,
		arg.Description,
		arg.ID,
		arg.TenantSlug,
		arg.UpdatedBy,
		arg.Name,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
